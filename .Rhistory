g1
g1 <- subset(mtcars, cyl == 4, select = mpg)
g1
g2 <- subset(mtcars, cyl == 6, select = mpg)
t.test(g1,g2, var.equal = FALSE)
3 + c(-1,1)*qt(0.975, df = 99)*1.1/sqrt(100)
?t.test
?pbinom
pbinom(0.5, size = 300, lower.tail = FALSE)
pbinom(55, size = 100, prob = 0.5, lower.tail = FALSE)
pbinom(55, size = 100, prob = 0.5)
pbinom(54, size = 55, prob = 0.5, lower.tail = FALSE)
pbinom(54, size = 100, prob = 0.5, lower.tail = FALSE)
qbinom(0.05)
qbinom(0.05, size = 100)
qbinom(0.05, size = 100, prob = 0.5)
?ppois
ppois(15800, lambda = 520*30, lower.tail = FALSE)
g1 <- rnorm(100, mean = 10, sd = 4)
g2 <- rnorm(100, mean = 11, sd = 4)
t.test(g1 - g2, paired = FALSE)
g1 <- rnorm(100, mean = 10, sd = 4/sqrt(100))
g2 <- rnorm(100, mean = 11, sd = 4/sqrt(100))
t.test(g1 - g2, paired = FALSE)
?power.t.test
power.t.test(n = 100, delta = 1, sd = 4)$power
power.t.test(power = 0.8, delta = 0.01, sd = 0.04)$n
args <- commandArgs(trailingOnly = TRUE)
length(args)
is.na(args)
args
length(args) !=0
length(args) == 2
stop("Invalid group specified", "\n", "Rscript design.R <group1> <group2>")
args <- c(1,2)
args
message(paste("export FSLVERSION=4.1.9; design_ttest2 design", args[1], args[2]))
stop("Invalid group specified :(", "\n", "Format: Rscript design.R <group1> <group2>")
design <- function(filename = "design", Covdata = "Covariate.xlsx", demean = TRUE) {
# check design.con and design.mat exists
if (file.exists("design.mat") == FALSE | file.exists("design.con") == FALSE) {
# Learnt file.exists() from: https://stat.ethz.ch/pipermail/r-help/2003-July/036129.html
group <- function()
{
cat('Number of subjects in the first group:', '\n')
a <- scan("",n=1, quiet=TRUE)
cat('Number of subjects in the second group:', '\n')
b <- scan("",n=1, quiet=TRUE)
message(paste("export FSLVERSION=4.1.9; design_ttest2 design", a, b))
# System call
system(paste("export FSLVERSION=4.1.9; design_ttest2 design", a, b))
}
group()
}
designmat(filename, Covdata, demean)
designcon(filename, NC)
}
design()
design <- function(filename = "design", Covdata = "Covariate.xlsx", demean = TRUE) {
# check design.con and design.mat exists
if (file.exists("design.mat") == FALSE | file.exists("design.con") == FALSE) {
# Learnt file.exists() from: https://stat.ethz.ch/pipermail/r-help/2003-July/036129.html
#                 group <- function()
#                 {
cat('Number of subjects in the first group:', '\n')
a <- scan("",n=1, quiet=TRUE)
cat('Number of subjects in the second group:', '\n')
b <- scan("",n=1, quiet=TRUE)
message(paste("export FSLVERSION=4.1.9; design_ttest2 design", a, b))
# System call
system(paste("export FSLVERSION=4.1.9; design_ttest2 design", a, b))
#                 }
#                 group()
}
designmat(filename, Covdata, demean)
designcon(filename, NC)
}
design()
cat('Number of subjects in the first group:', '\n')
a <- scan("",n=1, quiet=TRUE)
cat('Number of subjects in the first group:', '\n')
a <- scan("",n=1, quiet=TRUE)
?scan
scan*
scan()
scan(n = 1)
cat('Number of subjects in the first group:', '\n')
a <- scan(n=1, quiet=TRUE)
cat('Number of subjects in the first group:', '\n')
a <- scan(n=1, quiet=TRUE)
cat('Number of subjects in the first group:', '\n')
a <- scan(n=1, quiet=TRUE)
b <- scan(n=1, quiet=TRUE)
cat('Number of subjects in the first group:', '\n')
a <- scan(n=1, quiet=TRUE)
cat('Number of subjects in the first group:', '\n')
a <- readLines()
require(datasets)
data(swiss)
require(GGally)
require(ggplot2)
library(ggplot2, lib.loc = "//R01SFCHSM03.r01.med.va.gov/homedir$/vhasfczouy/My Documents/Coursera/library")
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
g
require(datasets); data(swiss); require(GGally); require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
g
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = list(corSize = 1))
g
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = list(corSize = 12))
g
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = list(labelSize = 12))
g
g = ggpairs(swiss, lower = list(continuous = "smooth"), size = 3)
g
g = ggpairs(swiss, lower = list(continuous = "smooth"), corSize = 3)
g
g = ggpairs(swiss, lower = list(continuous = "smooth"), corSize = 12)
g
g = ggpairs(swiss, lower = list(continuous = "smooth"), labelSize = 12)
g
g = ggpairs(swiss, lower = list(continuous = "smooth"), param = list(labelSize = 12))
g
g = ggpairs(swiss, lower = list(continuous = "smooth"), params = list(corSize = 12))
g = ggpairs(swiss, lower = list(continuous = "smooth"), params = list(corSize = 12))
g = ggpairs(swiss, lower = list(continuous = "smooth"), params = list(corSize = 12))
g
require(datasets); data(swiss); require(GGally); require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"), upper = list(params = c(size = 10)))
g
require(datasets); data(swiss); require(GGally); require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"), upper = list(params = c(size = 5)))
g
g = ggpairs(swiss, lower = list(continuous = "smooth"), upper = list(params = c(size = 5))) +
ax.yaxis.set_major_locator(MaxNLocator(nbins=5-1))
g
g = ggpairs(swiss, lower = list(continuous = "smooth"), upper = list(params = c(size = 5))) +
ax.yaxis.set_major_locator(MaxNLocator(nbins=5-5))
?ggpairs
g = ggpairs(swiss, lower = list(continuous = "smooth"), upper = list(params = c(size = 5)), axisLabels = "internal")
g
g = ggpairs(swiss, lower = list(continuous = "smooth"), upper = list(params = c(size = 5))) +
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(angle = 180, vjust = 1, color = "black"),
panel.border = element_rect(fill = NA))
g
g = ggpairs(swiss, lower = list(continuous = "smooth"), upper = list(params = c(size = 5))) +
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(angle = 180, vjust = 5, color = "black"),
panel.border = element_rect(fill = NA))
g
theme(legend.position = "internal",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(angle = 180, vjust = 1, color = "black"),
panel.border = element_rect(fill = NA))
?axis.title.x
g = ggpairs(swiss, lower = list(continuous = "smooth"), upper = list(params = c(size = 5))) +
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(angle = 180, vjust = 1, color = "black"),
axis.ticks.margin = 2,
panel.border = element_rect(fill = NA))
g
g = ggpairs(swiss, lower = list(continuous = "smooth"), upper = list(params = c(size = 5))) +
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(angle = 180, vjust = 1, color = "black"),
legend.margin = 2,
panel.border = element_rect(fill = NA))
g
g = ggpairs(swiss, lower = list(continuous = "smooth"), upper = list(params = c(size = 5))) +
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(angle = 180, vjust = 1, color = "black"),
axis.ticks.margin = unit(2,cm),
panel.border = element_rect(fill = NA))
g
g = ggpairs(swiss, lower = list(continuous = "smooth"), upper = list(params = c(size = 5))) +
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(angle = 180, vjust = 1, color = "black"),
axis.ticks.margin = unit(2,"cm"),
panel.border = element_rect(fill = NA))
g
?color.legend
install.packages("plotrix")
library(plotrix, lib.loc = "//R01SFCHSM03.r01.med.va.gov/homedir$/vhasfczouy/My Documents/Coursera/library")
?color.legend
par(mar=c(7,4,4,6))
testcol<-color.gradient(c(0,1),0,c(1,0),nslices=5)
col.labels<-c("Cold","Warm","Hot")
color2D.matplot(matrix(rnorm(100),nrow=10),c(1,0),0,c(0,1),
main="Test color legends")
color.legend(11,6,11.8,9,col.labels,testcol,gradient="y")
color.legend(10.2,2,11,5,col.labels,testcol,align="rb",gradient="y")
color.legend(0.5,-2,3.5,-1.2,col.labels,testcol)
color.legend(7,-1.8,10,-1,col.labels,testcol,align="rb",col=testcol[c(1,3,5)])
par(mar=c(5,4,4,2))
col1 <- designer.colors( n=256, col= c("darkviolet", "deepskyblue4", "green", "yellow", "red"), x= seq(0,1, 0.25))
image.plot( legend.only=TRUE, zlim= c(0, round(zmax, 2)), col = col1, legend.lab = "Density", horizontal = TRUE)
library(ggplot2)
library(reshape2)
library(ggplot2, lib.loc = "//R01SFCHSM03.r01.med.va.gov/homedir$/vhasfczouy/My Documents/Coursera/library")
data(movies)
movieGenres <- movies[c(18:23)]
cor(movieGenres)
m <-melt(cor(movieGenres))
m
p <- ggplot(data=m, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
p
p <- ggplot(data=m, aes(x=Var1, y=Var2, fill=value))
p
p
p <- ggplot(data=m, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
p
red = rgb(1,0,0); green=rgb(0,1,0); blue=rgb(0,0,1); white=rgb(1,1,1)
WtoGrange <- colorRampPalette(c(white, green))
p <- p + scale_fill_gradient2(low=RtoWrange(100), mid=WtoGrange(100), high="gray")
g
p
p <- p + scale_fill_gradient2(low=RtoWrange(100), mid=WtoGrange(100), high="gray")
p
RtoWrange <- colorRampPalette(c(red, white))
WtoGrange <- colorRampPalette(c(white, green))
p <- p + scale_fill_gradient2(low=RtoWrange(100), mid=WtoGrange(100), high="gray")
p
p <- ggplot(data=m, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
p <- p + scale_fill_gradient2(low="red", mid=WtoGrange(100), high="gray")
p
p <- ggplot(data=m, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
p <- p + scale_fill_gradient2(low="red", high="gray")
p
red = rgb(255,0,0); green=rgb(0,1,0); blue=rgb(0,0,1); white=rgb(1,1,1)
p <- ggplot(data=m, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
p <- p + scale_fill_gradient2(low="red", high="gray")
p
p <- ggplot(data=m, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
p <- p + scale_fill_gradient2(low="red", high="yellow")
p
?rgb
p <- ggplot(data=m, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
p <- p + scale_fill_gradient(low="red", high="yellow")
p
cor(movieGenres)
m <-melt(cor(movieGenres))
m[m < 0] <- 0
m
head(m)
m$value[m$value < 0] <- 0
p <- ggplot(data=m, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
p <- p + scale_fill_gradient(low="red", high="yellow")
p
m$value[m$value <= 0.95] <- 0.95
p <- ggplot(data=m, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
p <- p + scale_fill_gradient(low="red", high="yellow")
p
cor(movieGenres)
m <-melt(cor(movieGenres))
head(m)
m$value[m$value <= 0.95] <- 0.05
m$value[m$value > 0.95] <- 0
p <- ggplot(data=m, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
p <- p + scale_fill_gradient(low="yellow", high="red")
p
cite()
citation()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
setwd("C:/Users/vhasfczouy/Desktop/Coursera")
download.file(fileUrl, destfile = "./getdata/data/cameras.csv", method = "curl")
list.files("./getdata/data")
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
download.file(fileUrl, destfile = "./data/cameras.csv")
download.file(fileUrl, destfile = "./getdata/data/cameras.csv")
download.file(fileUrl, destfile = "./cameras.csv")
list.files("./")
download.file(fileUrl, destfile = ".\data\cameras.csv")
download.file(fileUrl, destfile = "\data\cameras.csv")
dir.create("data")
download.file(fileUrl, destfile = "./data/cameras.csv")
list.files("./data")
dateDownloaded <- date()
dateDownloaded
dat <- read.csv("./data/cameras.csv")
head(dat)
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
dat <- read.csv("./data/cameras.csv")
head(dat)
cameraData <- read.table("./data/cameras.csv")
cameraData <- read.table("./data/cameras.csv", sep = ",", header = TRUE)
head(cameraData)
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.xlsx")
list.files("./data")
dateDownloaded <- date()
library(xlsx, lib.loc = "//R01SFCHSM03.r01.med.va.gov/homedir$/vhasfczouy/My Documents/Coursera/library")
library(proto, lib.loc = "//R01SFCHSM03.r01.med.va.gov/homedir$/vhasfczouy/My Documents/Coursera/library")
library(sqldf, lib.loc = "//R01SFCHSM03.r01.med.va.gov/homedir$/vhasfczouy/My Documents/Coursera/library")
cameraData <- read.xlsx("./data/cameras.csv", sheetIndex=1, header = TRUE)
cameraData <- read.xlsx("./data/cameras.xlsx", sheetIndex=1, header = TRUE)
cameraData <- read.xlsx("./data/cameras.xlsx", sheetIndex=1, header = TRUE)
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.xlsx")
list.files("./data")
cameraData <- read.xlsx("./data/cameras.xlsx", sheetIndex=1, header = TRUE)
library(XML)
install.packages("XML")
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode,xmlValue)
fileUrl <- "http://espn.go.com/nfl/tem/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal=TRUE)
doc <- htmlTreeParse(fileUrl)
doc <- htmlTreeParse(fileUrl,useInternalNodes = TRUE)
doc <- htmlTreeParse(fileUrl,useInternal=TRUE)
install.packages("XPath")
fileUrl <- "https://www.google.com/maps/dir/%E5%8A%A0%E5%88%A9%E7%A6%8F%E5%B0%BC%E4%BA%9A%E5%B7%9E%E6%B4%9B%E6%9D%89%E7%9F%B6/%E5%8A%A0%E5%88%A9%E7%A6%8F%E5%B0%BC%E4%BA%9A%E5%B7%9E%E5%9C%A3%E5%9C%B0%E7%89%99%E5%93%A5/@33.3885697,-118.293063,9z/data=!4m14!4m13!1m5!1m1!1s0x80c2c75ddc27da13:0xe22fdf6f254608f4!2m2!1d-118.2436849!2d34.0522342!1m5!1m1!1s0x80d9530fad921e4b:0xd3a21fdfd15df79!2m2!1d-117.1610838!2d32.715738!5i1"
doc <- htmlTreeParse(fileUrl,useInternal=TRUE)
head(doc)
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
library(curl)
install.packages("curl")
library(curl, lib.loc = "//R01SFCHSM03.r01.med.va.gov/homedir$/vhasfczouy/My Documents/Coursera/library")
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
jsonData$owner$login
myjson <- toJSON(iris, pretty=TRUE)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
library(data.table)
install.packages("data.table")
library(data.table, lib.loc = "//R01SFCHSM03.r01.med.va.gov/homedir$/vhasfczouy/My Documents/Coursera/library")
DF <- data.frame(x=rnorm(9), y = rep(c("a","b","c"),each = 3),z=rnorm(9))
head(DF,3)
DT <- data.table(x=rnorm(9), y = rep(c("a","b","c"),each = 3),z=rnorm(9))
head(DT,3)
tables()
tables(DF)
DT[2,]
DT[DT$y == "a",]
DT[c(2,3)]
DT[,c(2,3)]
DT[,list(mean(x),sum(z))]
DT[,table(y)]
table()
DT[,w:=z^2]
DT
DT2 <- DT
DT2
DT[,y:=2]
DT2
DT[,m:= {tmp <- (x+z); log2(tmp+5)}]
DT
DT2
DT[,a:=x>0]
DT
DT[,b:= mean(x+w), by=a]
DT
.N
set.seed(123)
DT <- data.table(x=sample(letters[1:3], 1E5, TRUE))
DT[, .N, by=x]
DT <- data.table(x=rep(c("a","b","c"), each=100), y=rnorm(300))
setkey(DT, x)
DT['a']
big_df <- data.frame(x=rnorm(1E6), y=rnorm(1E6))
file <- temfile()
file <- tempfile()
write.table(big_df, file=file, row.names=FALSE, col.names=TRUE, sep = "\t", quote = FALSE)
system.time(fread(file))
system.time(read.table(file, header=TRUE, sep="\t"))
download.file(fileUrl, destfile = "./data/2006survey.csv")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "./data/2006survey.csv")
list.files("./data")
survey <- read.csv("./data/2006survey.csv")
head(survey)
names(survey)
head(survey$VAL)
survey$VAL
names(survey)
head(survey)
survey2 <- data.table(survey)
survey2[,.N,FINCP>1000000]
survey2[,.N,HINCP>1000000]
survey2[,.N,ADJUST>1000000]
survey2[,.N,VAL>=14]
survey2[,.N,VAL>14]
survey2[,.N,VAL>=14]
survey2[,.N,VAL>=24]
head(survey2)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "./data/NGAP.xlsx")
NGAP <- read.xlsx("./data/NGAP.xlsx", colIndex = 7:15, rowIndex = 18:23)
NGAP <- read.xlsx("./data/NGAP.xlsx", colIndex = 7:15, rowIndex = 18:23, sheetIndex = 1)
NGAP
NGAP <- read.xlsx("./data/NGAP.xlsx", sheetIndex = 1)
head(NGAP)
NGAP <- read.xlsx("./data/NGAP.xlsx", sheetIndex = 1)
download.file(fileUrl, destfile = "./data/NGAP.xlsx")
NGAP <- read.xlsx("./data/NGAP.xlsx", sheetIndex = 1)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
setwd("C:/Users/vhasfczouy/Desktop/Coursera")
lib.loc <- "//R01SFCHSM03.r01.med.va.gov/homedir$/vhasfczouy/My Documents/Coursera/library"
library(httr, lib.loc = lib.loc)
library(httr, lib.loc = lib.loc)
url <- "https://api.github.com/users/jtleek/repos"
homeTL <- GET("https://api.github.com/users/jtleek/repos")
content(homeTL)
jl <- content(homeTL)
jl[1]
jl[1, 1:10]
jl[[1]]
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "af11e252b52c4854e8c5",
secret = "4e1c2df3f04fa3625c7f76402c8b1a6b1e76e372")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
jl <- content(homeTL)
head(homeTL)
homeTL
jl
head(jl)
jl[1]
head(jl[1])
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
homeTL <- GET("https://api.github.com/users/jtleek/repos")
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req <- GET("http://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
req <- GET("http://api.github.com/users/jtleek/repos", gtoken)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httpuv, lib.loc = lib.loc)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req[1]
req[2]
req[3]
req[4]
req[5]
req[6]
content(req)
req2 <- content(req)
req2[1]
names(req2)
names(req2[1])
req2
names(req2[[30]])
names(req2[[29]])
names(req2[[1]])
names(req2)
req2[[1]][1]
req2[[1]][2]
req2[[30]][2]
req2[[1:30]][2]
req2[[c(1,2)]][2]
req2$name
req3 <- jsonlite::fromJSON(toJSON(req2))
library(rjson, lib.loc = lib.loc)
req3 <- jsonlite::fromJSON(toJSON(req2))
head(req3)
names(req3)
req3$name
req3[,7]
req3[7,]
names(req3)
req3[7,45]
setwd("C:/Users/vhasfczouy/Desktop/Coursera/Getting Cleaning Data")
library(dplyr)
chicago <- readRDS("../data/chicago.rds")
chicago <- rename(chicago, pm25 = pm25tmean2, dewpoint = dptp)
head(chicago)
setwd("C:/Users/vhasfczouy/Desktop/Coursera/Getting Cleaning Data/GCD_Project")
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt", stringsAsFactors = FALSE)
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt", stringsAsFactors = FALSE)
y_test_al <- join(y_test, activity_labels)
library(plyr)
y_test_al <- join(y_test, activity_labels)
y_test_al <- rename(y_test_al, activity.label = "V1", activity = "V2")
y_test_al <- rename(y_test_al, activity.label = V1, activity = V2)
library(dplyr)
y_test_al <- rename(y_test_al, activity.label = V1, activity = V2)
