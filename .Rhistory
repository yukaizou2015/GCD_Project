g <- g + xlab("Mode")
g
g <- ggplot(mtcars, aes(x = factor(am), y = mpg, fill = am))
g <- g + geom_boxplot()
g <- g + xlab("Modes of Transmission")
g
g <- ggplot(mtcars, aes(x = factor(am), y = mpg, fill = am))
g <- g + geom_boxplot()
g <- g + xlab("Modes of Transmission")
g <- g + ylab("Miles per Gallon")
g
g <- ggplot(mtcars, aes(x = factor(am), y = mpg, fill = am))
g <- g + geom_boxplot()
g <- g + xlab("Modes of transmission")
g <- g + ylab("Miles per gallon")
g
g <- ggplot(mtcars, aes(x = factor(am), y = mpg, fill = am))
g <- g + geom_boxplot()
g <- g + xlab("Modes of transmission") + scale_x_discrete(labels = c("automatic", "manual"))
g <- g + ylab("Miles per gallon")
g
g <- ggplot(mtcars, aes(x = factor(am), y = mpg, fill = am))
g <- g + geom_boxplot()
g <- g + xlab("Modes of transmission") + scale_x_discrete(labels = c("automatic", "manual"))
g <- g + ylab("Miles per gallon")
g <- g + theme(legend.position = "n")
g
g <- ggplot(mtcars, aes(x = factor(am), y = mpg))
g <- g + geom_boxplot()
g <- g + xlab("Modes of transmission") + scale_x_discrete(labels = c("automatic", "manual"))
g <- g + ylab("Miles per gallon")
g <- g + theme(legend.position = "n")
g <- g + heat.color()
g
g <- ggplot(mtcars, aes(x = factor(am), y = mpg))
g <- g + geom_boxplot()
g <- g + xlab("Modes of transmission") + scale_x_discrete(labels = c("automatic", "manual"))
g <- g + ylab("Miles per gallon")
g <- g + theme(legend.position = "n")
g <- g + heat.colors()
g
g <- ggplot(mtcars, aes(x = factor(am), y = mpg, fill = factor(am)))
g <- g + geom_boxplot()
g <- g + xlab("Modes of transmission") + scale_x_discrete(labels = c("automatic", "manual"))
g <- g + ylab("Miles per gallon")
g <- g + theme(legend.position = "n")
g
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?fit
fit <- lm(y ~ x)
round(hatvalues(fit), 3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
round(dfbetas(fit), 4)
data(mtcars)
head(mtcars)
x1 <- mtcars$cyl # cylinder variable
x2 <- mtcars$wt # confounder (weight)
y <- mtcars$mpg
fit <- lm(y ~ x1)
fit
fit2 <- lm(y ~ x1 + x2)
fit2
fit2 <- lm(y ~ x1 - x2)
fit2
fit2 <- lm(y ~ x1 + x2)
fit2
fit <- lm(y ~ factor(x1))
fit
fit2 <- lm(y ~ factor(x1) + x2)
fit2
fit
fit2
plot(type = "n")
plot(x = x1, y = y, type = "n")
plot(x = x1, y = y)
mtcars$cyl
mtcars$cyl[mtcars$cyl == 6]
mtcars[mtcars$cyl == 4 | mtcars$cyl == 8, ]
dat <- mtcars[mtcars$cyl == 4 | mtcars$cyl == 8, ]
y <- dat$mpg
x1 <- dat$cyl # cylinder variable
x2 <- dat$wt # confounder (weight)
fit <- lm(y ~ factor(x1))
fit2 <- lm(y ~ factor(x1) + x2) # using factor function is important so that x1 won't be
fit2
fit1
fit
summary(fit2)$coefficients
fit2
fit <- lm(mpg ~ cyl, data = mtcars)
fit
summary(fit)$coefficients
fit <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit)$coefficients
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)$coefficients
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)$coefficients[3]
fit <- lm(mpg ~ factor(cyl), data = mtcars) # slide 9/35
summary(fit)$coefficients
fit2 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit2)$coefficients
c(summary(fit)$coefficients[3], summary(fit2)$coefficients[3])
c(a = summary(fit)$coefficients[3], b = summary(fit2)$coefficients[3])
c(unadjusted = summary(fit)$coefficients[3],
adjusted = summary(fit2)$coefficients[3])
fit <- lm(mpg ~ factor(cyl), data = mtcars)
fit2 <- lm(mpg ~ factor(cyl)*wt, data = mtcars)
summary(fit)$coefficients
summary(fit2)$coefficients
data(mtcars)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit2 <- lm(mpg ~ I(wt * 1) + factor(cyl), data = mtcars)
summary(fit2)$coefficients
summary(fit)$coefficients
?I
summary(fit)$coefficients
summary(fit2)$coefficients
?mtcars
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl)*wt, data = mtcars)
summary(fit)$coefficients
summary(fit2)$coefficients # how to interpret P value?
# Question 4
data(mtcars)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit2 <- lm(mpg ~ I(wt * 1) + factor(cyl), data = mtcars)
summary(fit)$coefficients
summary(fit2)$coefficients
lm(mpg ~ I(wt * 2) + factor(cyl), data = mtcars)
summary(lm(mpg ~ I(wt * 2) + factor(cyl), data = mtcars))$coefficients
lm(mpg ~ I(wt * 2) + factor(cyl), data = mtcars)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
I(wt * 0.5)
I(mtcars$wt * 0.5)
I(mtcars$wt * 1)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
lm(y ~ x)
lm(y ~ x * 0.5)
lm(y ~ I(x * 0.5))
lm(y ~ I(x * 1))
data(mtcars)
fit <- lm(mpg ~ factor(cyl), data = mtcars)
fit2 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)$coefficients
summary(fit2)$coefficients
c(unadjusted = summary(fit)$coefficients[3],
adjusted = summary(fit2)$coefficients[3])
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
round(dfbetas(fit), 4)
round(hatvalues(fit), 3)
library(XML)
?xpathApply
data(iris)
library(ggplot2)
news(Version == "1.0.1", package = "ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
names(iris)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Pedal.Width, Sepal.Width, colour=Species, data=training)
qplot(Pedal.Width, Sepal.Width, colour=Species, data=training, data = iris)
?qplot
qplot(Pedal.Width, Sepal.Width, data = iris, colour=Species, data=training)
names(iris)
qplot(Pedal.Width, Sepal.Width, colour=Species, data=training)
names(training)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
modFit <- train(Species ~ ., method = "rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.package("rpart.plot")
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata=testing)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone, package="ElemStatLearn")
ozone <- ozone[order(ozone$ozone)]
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA, nrow=10, ncol=155)
ss <- sample(1:dim(ozone)[1], replace=T)
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone, data=ozone0, span=0.2j)
ll[i,] <- predict(loess0, newdata=data.frame(ozone=1:155))
loess0 <- loess(temperature ~ ozone, data=ozone0, span=0.2)
ll[i,] <- predict(loess0, newdata=data.frame(ozone=1:155))
for (i in 1:10){
ss <- sample(1:dim(ozone)[1], replace=T)
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone, data=ozone0, span=0.2)
ll[i,] <- predict(loess0, newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone, ozone$temperature, pch=19, cex=0.5)
for(i in 1:10){lines(1:155, ll[i,], col="grey", lwd=2)}
lines(1:155, apply(ll,2,mean), col="red", lwd = 2)
setwd("~/Desktop/Coursera/CleaningData/GCD_Project")
setwd("~/Desktop/Coursera/CleaningData/GCD_Project")
list.files("./UCI HAR Dataset/")
list.files("./UCI HAR Dataset/test")
list.files("./UCI HAR Dataset/train/")
readLines(X_train.txt)
readLines("./UCI HAR Dataset/train/X_train.txt")
list.files("./UCI HAR Dataset/train/")
X_train <- readLines("./UCI HAR Dataset/train/X_train.txt")
dim(X_train)
class(X_train)
summary(X_train)
X_train[1]
?readLines
list.files("./UCI HAR Dataset/train/")
list.files("./UCI HAR Dataset/train/Inertial Signals/")
rm(X_train)
list.files("./UCI HAR Dataset/train/Inertial Signals/")
body_acc_x_train <- readLines("./UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt")
str(body_acc_x_train)
body_acc_x_train <- readLines("./UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt", sep = " ")
?read.table
body_acc_x_train <- read.table("./UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt")
head(body_acc_x_train)
list.files("./UCI HAR Dataset/train/Inertial Signals/")
list.files("./UCI HAR Dataset/test/Inertial Signals/")
list.files("./UCI HAR Dataset/test/")
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
head(X_train)
?write.table
write.table(X_train, "combined.txt", row.name=FALSE)
tail(X_train)
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
head(y_train)
tail(y_train)
data.frame(Activity = y_train)
train <- data.frame(Activity = y_train, X_train) # Activity: label from y_train
head(train)
train <- data.frame(Activity = y_train$V1, X_train) # Activity: label from y_train
head(train)
rm(train)
Train <- data.frame(Activity = y_train$V1, X_train) # Activity: label from y_train
Test <- data.frame(Activity = y_test$V1, X_test)
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
Test <- data.frame(Activity = y_test$V1, X_test)
head(Test)
write.table(Train, "combined.txt", row.name=FALSE)
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
head(subject)
head(subject_train)
tail(subject_train)
names(subject_train)
Train <- data.frame(Subject = subject_train$V1, Activity = y_train$V1, X_train) # Activity: label from y_train
names(Train)
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
Test <- data.frame(Subject = subject_test, Activity = y_test$V1, X_test)
write.table(Train, "combined.txt", row.name=FALSE)
body_acc_x_train <- read.table("./UCI HAR Dataset/train/Inertial Signals/body_acc_x_train.txt")
head(body_acc_x_train)
tail(body_acc_x_train)
features <- read.table("./UCI HAR Dataset/features.txt")
head(features)
features <- features$V2
features
features <- read.table("./UCI HAR Dataset/features.txt", stringsAsFactors=FALSE)
features <- features$V2
features
names(X_test) <- features
Test <- data.frame(Subject = subject_test, Activity = y_test$V1, X_test)
head(Test)
features
class(features)
head(Test)
?data.frame
?names
names(X_train) <- features
Train <- data.frame(Subject = subject_train$V1, Activity = y_train$V1, X_train) # Activity: label from y_train
head(Train)
names(Train)
head(Train)
head(Train, 1)
write.table(Train, "combined.txt", row.name=FALSE)
?merge
Merge <- merge(Train, Test, by = c(Subject, Activity))
names(Train)
Merge <- merge(Train, Test, by = c("Subject", "Activity"))
intersect(Train, Test)
Merge <- merge(Train, Test, by = Subject)
Merge <- merge(Train, Test, by = Activity)
Merge <- merge(Train, Test, by = "Activity")
head(Merge)
head(Train)
head(Train[,1])
head(Train[,2])
head(Train[,2],20)
head(Train[,1],20)
?melt
Merge <- merge(Train, Test)
head(Merge)
head(Train)
head(Test)
Merge <- merge(Train, Test, by.x = c("Subject", "Activity"), by.y = c("Subject", "Activity"))
paste(subject_test$V1, y_test$V1, sep=".")
paste(subject_train$V1, y_train$V1, sep=".")
Merge <- merge(Train, Test, all=TRUE)
head(Merge)
tail(Merge)
setwd("~/Desktop/Coursera/Practical Machine Learning")
fileUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
?download.file
download.file(fileUrl, destfile = "pml-testing.csv", method = curl)
download.file(fileUrl, destfile = "pml-testing.csv", mode = curl)
download.file(fileUrl, destfile = "pml-testing.csv", method = "curl")
pmltest <- read.csv("pml-testing.csv")
head(pmltest)
tail(pmltest)
library(pgmm); library(rpart)
data(olive)
head(olive)
olive <- olive[,-1]
head(olive)
fitMod <- rpart(Area ~ ., data = olive)
newdata = as.data.frame(t(colMeans(olive)))
as.data.frame(t(colMeans(olive)))
predict(fitMod, newdata = as.data.frame(t(colMeans(olive))))
list.files()
library(caret); library(randomForest)
setwd("~/Desktop/Coursera/Practical Machine Learning")
training <- read.csv("pml-training.csv", na.strings = c("NA", ""))
setwd("~/Desktop/Coursera/Practical Machine Learning/PML_Project/")
training <- read.csv("pml-training.csv", na.strings = c("NA", ""))
head(training)
training <- read.csv("pml-training.csv", na.strings = c("NA", "")); training.NAlist <- grep("NA", training)
training <- select(training, -training.NA.list)
library(dplyr)
training <- select(training, -training.NA.list)
training <- select(training, -training.NAlist)
head(training)
dim(training)
testing <- read.csv("pml-testing.csv", na.strings = c("NA", "")); testing.NAlist <- grep("NA", testing); testing <- select(testing, -testing.NAlist)
dim(testing)
str(training)
str(testing)
training[,-length(training)] <- data.frame(sapply(training[,-length(training)], as.numeric))
testing[,-length(testing)] <- data.frame(sapply(testing[,-length(testing)], as.numeric))
modFit3 <- randomForest(classe ~ ., data = training[,-c(1,2)])
saveRDS(modFit3, "mySavedModel003.rds")
modFit3
answers3 <- predict(modFit3, testing[,-c(1,2,length(testing))])
answers3
source("pml_write_files.R")
pml_write_files(answers)
pml_write_files(answer3)
pml_write_files(answers3)
inTrain <- createDataPartition(y=training$Species, p=0.7, list=FALSE)
inTrain <- createDataPartition(y=training$classe, p=0.7, list=FALSE)
training.train <- training[inTrain,]
testing.train <- training[-inTrain,]
head(training[,1:6])
inTrain <- createDataPartition(y=training$X, p=0.7, list=FALSE)
training.train <- training[inTrain,]
testing.train <- training[-inTrain,]
training.train$X
training.test$X
training.test <- training[-inTrain,]
training.test$X
modFit.train <- randomForest(classe ~ ., data = training.train[,-c(1,2)])
modFit.predict <- predict(modFit.train, newdata = training.test[,-c(1,2,length(training.test))])
head(modFit.predict)
head(modFit.predict,20)
head(training.train)
head(training.test)
head(training)
training <- read.csv("pml-training.csv", na.strings = c("NA", "")); training.NAlist <- grep("NA", training); training <- select(training, -training.NAlist)
head(training)
tail(training)
inTrain <- createDataPartition(y=training$classe, p=0.7, list=FALSE)
training.train <- training[inTrain,]
training.test <- training[-inTrain,]
head(training.train)
tail(training.train)
tail(training.test)
head(training.test)
modFit.train <- randomForest(classe ~ ., data = training.train[,-c(1,2)])
modFit.train
modFit.predict <- predict(modFit.train, newdata = training.test[,-c(1,2,length(training.test))])
head(modFit.predict,20)
tail(modFit.predict,20)
table(training.test$classe, modFit.predict)
confusionMatric(training.test$classe, modFit.predict)
confusionMatrix(training.test$classe, modFit.predict)
modFit <- train(classe ~ ., method = "rf", data = training[,-c(1,2)]); saveRDS(modFit, "mySavedModel001.rds")
modFit <- train(classe ~ ., method = "pca", data = training[,-c(1,2)]); saveRDS(modFit, "mySavedModel001.rds")
modFit <- train(classe ~ ., method = "lda", data = training[,-c(1,2)]); saveRDS(modFit, "mySavedModel001.rds")
system.time()
modFit2 <- train(classe ~ ., method = "nb", data = training[,-c(1,2)]); saveRDS(modFit, "mySavedModel002.rds")
modFit <- train(classe ~ ., method = "lda", data = training.train[,-c(1,2)]); saveRDS(modFit, "mySavedModel001.rds")
modFit
modFit$finalModel
modFit
modFit2 <- train(classe ~ ., method = "rpart", data = training.train[,-c(1,2)]); saveRDS(modFit, "mySavedModel002.rds")
modFit2
modFit3 <- randomForest(classe ~ ., data = training.train[,-c(1,2)]); saveRDS(modFit3, "mySavedModel003.rds")
modFit3
answers1 <- predict(modFit1, training.test[,-c(1,2,length(training.test))])
saveRDS(modFit2, "mySavedModel002.rds")
answers1 <- predict(modFit, training.test[,-c(1,2,length(training.test))])
answers2 <- predict(modFit2, training.test[,-c(1,2,length(training.test))])
answers3 <- predict(modFit3, training.test[,-c(1,2,length(training.test))])
confusionMatrix(training.test$classe, answers1)
confusionMatrix(training.test$classe, answers2)
confusionMatrix(training.test$classe, answers3)
table(training.test$classe, answers1)
table(training.test$classe, answers2)
table(training.test$classe, answers3)
finalMod <- randomForest(classe ~ ., data = training[,-c(1,2)])
finalMod.predict <- predict(finalMod, newdata = testing[,-c(1,2,length(testing))])
training[,-length(training)] <- data.frame(sapply(training[,-length(training)], as.numeric))
testing[,-length(testing)] <- data.frame(sapply(testing[,-length(testing)], as.numeric))
finalMod <- randomForest(classe ~ ., data = training[,-c(1,2)])
finalMod.predict <- predict(finalMod, newdata = testing[,-c(1,2,length(testing))])
finalMod.predict
table(training.test$classe, answers1)
table(training.test$classe, answers2)
table(training.test$classe, answers3)
?elapse.time
nearZeroVar(training.train)
nearZeroVar(training.train, saveMetrics=TRUE)
confusionMatrix(training.test$classe, answers2)
modFit3
finalMod <- randomForest(classe ~ ., data = training[,-c(1,2)]); saveRDS(finalMod, "mySavedModel_final.rds")
finalMod <- readRDS("mySavedModel_final.rds")
```{r, eval=FALSE}
head(training.train)
?write.csv
write.csv(training.train, file = "pml-training_train.csv")
read.csv("pml-training_train.csv")
head(read.csv("pml-training_train.csv"))
write.csv(training.train, file = "pml-training_train.csv", row.names = FALSE)
head(read.csv("pml-training_train.csv"))
write.csv(training.test, file = "pml-training_test.csv", row.names = FALSE)
write.csv(training, "pml-training_processed.csv", row.names=FALSE)
write.csv(testing, "pml-testing_processed.csv", row.names=FALSE)
str(training)
str(testing)
training.train <- read.csv("pml-training_train.csv")
training.test <- read.csv("pml-training_test.csv")
setwd("~/Desktop/Coursera/CleaningData/GCD_Project")
data <- read.csv("2nd_tidydataset.txt")
head(data[,1:6])
data <- read.table("2nd_tidydataset.txt")
head(data[,1:6])
data <- read.table("2nd_tidydataset.txt", header= FALSE)
head(data[,1:6])
?read.table
data <- read.table("2nd_tidydataset.txt", header=TRUE)
head(data[,1:6])
dim(data)
names(data)
str(data)
library(dplyr)
?mutate
setwd("~/Desktop/Coursera/CleaningData/GCD_Project")
library(dplyr)
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt", stringsAsFactors = FALSE)
features <- read.table("./UCI HAR Dataset/features.txt", stringsAsFactors=FALSE)
# extract indexes for mean and std variables
ind.mean <- grep("mean()", features$V2, fixed = TRUE)
ind.std <- grep("std()", features$V2, fixed = TRUE)
# read in test sets
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt"); names(X_test) <- features$V2
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt") %>% rename(subject = V1)
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt", stringsAsFactors = FALSE) %>% rename(activity = V1)
Test <- data.frame(subject_test, y_test, X_test) %>% select(1:2, ind.mean+2, ind.std+2)
# read in training sets
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt"); names(X_train) <- features$V2
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt") %>% rename(subject = V1)
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt", stringsAsFactors = FALSE) %>% rename(activity = V1)
Train <- data.frame(subject_train, y_train, X_train) %>% select(1:2, ind.mean+2, ind.std+2)
combined <- full_join(Train, Test)
Train <- data.frame(subject_train, y_train, X_train) %>% select(1:2, ind.mean+2, ind.std+2)
ind.mean <- grep("mean()", features$V2)
ind.std <- grep("std()", features$V2)
Test <- data.frame(subject_test, y_test, X_test) %>% select(1:2, ind.mean+2, ind.std+2)
ind.mean <- grep("mean()", features$V2, fixed = TRUE)
ind.std <- grep("std()", features$V2, fixed = TRUE)
ind.mean
Test <- data.frame(subject_test, y_test, X_test) %>% select(1:2, ind.mean+2, ind.std+2)
head(Test)
Test <- data.frame(subject_test, y_test, X_test)
Test <- data.frame(subject_test, y_test, X_test) %>% select(1:2, ind.mean+2, ind.std+2)
library(dplyr)
Test <- data.frame(subject_test, y_test, X_test) %>% select(1:2, ind.mean+2, ind.std+2)
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt", stringsAsFactors = FALSE) %>% rename(activity = V1)
Test <- data.frame(subject_test, y_test, X_test) %>% select(1:2, ind.mean+2, ind.std+2)
Test <- data.frame(subject_test, y_test, X_test) %>% select(Test, 1:2, ind.mean+2, ind.std+2)
?select
